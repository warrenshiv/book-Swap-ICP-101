service: () -> {
    acceptSwapRequest: (text) -> (variant {Ok:record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createFeedback: (record {userId:text; comment:text; swapRequestId:text; rating:nat64}) -> (variant {Ok:record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createSwapRequest: (record {ownerId:text; bookId:text; requesterId:text}) -> (variant {Ok:record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createUserProfile: (record {name:text; email:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; userId:text; name:text; createdAt:text; email:text; phoneNumber:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    deleteBook: (text) -> (variant {Ok; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    deleteFeedback: (text) -> (variant {Ok; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    deleteSwapRequest: (text) -> (variant {Ok; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    getAllBooks: () -> (variant {Ok:vec record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getAllFeedbacks: () -> (variant {Ok:vec record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getAllSwapRequests: () -> (variant {Ok:vec record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getBook: (text) -> (variant {Ok:record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getBooksByGenre: (text) -> (variant {Ok:vec record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getBooksByUser: (text) -> (variant {Ok:vec record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getFeaturedSwappers: () -> (variant {Ok:vec record {username:text; userId:text; booksSwapped:nat64; bookDetails:opt record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getFeedback: (text) -> (variant {Ok:record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getFeedbacksBySwapRequest: (text) -> (variant {Ok:vec record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getFeedbacksByUser: (text) -> (variant {Ok:vec record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getNumberOfBooks: (text) -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getNumberOfCompletedSwapRequests: (text) -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getNumberOfPendingSwapRequests: (text) -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getSwapRequest: (text) -> (variant {Ok:record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getSwapRequestsByUser: (text) -> (variant {Ok:vec record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getSwapRequestsForUser: (text) -> (variant {Ok:vec record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getTotalBooks: () -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getTotalCompletedSwapRequests: () -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getTotalUsers: () -> (variant {Ok:nat64; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUserProfile: (text) -> (variant {Ok:record {owner:principal; userId:text; name:text; createdAt:text; email:text; phoneNumber:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUserProfileByOwner: () -> (variant {Ok:record {owner:principal; userId:text; name:text; createdAt:text; email:text; phoneNumber:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    listBook: (record {title:text; userId:text; description:text; author:text; imageUrl:text; genre:text}) -> (variant {Ok:record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    rejectSwapRequest: (text) -> (variant {Ok:record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    searchBooks: (text) -> (variant {Ok:vec record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    updateBook: (text, record {title:text; userId:text; description:text; author:text; imageUrl:text; genre:text}) -> (variant {Ok:record {title:text; userId:text; createdAt:text; description:text; bookId:text; author:text; imageUrl:text; genre:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    updateFeedback: (record {userId:text; comment:text; swapRequestId:text; rating:nat64}) -> (variant {Ok:record {userId:text; createdAt:text; comment:text; swapRequestId:text; rating:nat64; feedbackId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    updateSwapRequest: (record {ownerId:text; bookId:text; requesterId:text}) -> (variant {Ok:record {status:text; ownerId:text; createdAt:text; bookId:text; swapRequestId:text; requesterId:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    updateUserProfile: (text, record {name:text; email:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; userId:text; name:text; createdAt:text; email:text; phoneNumber:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
}
